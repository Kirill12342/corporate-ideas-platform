<?php
// –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ analytics.php API
header('Content-Type: text/html; charset=utf-8');

echo "<h2>üîç –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ analytics.php</h2>";

// –°–∏–º—É–ª–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –¥–µ–ª–∞–µ—Ç JavaScript
$postData = json_encode([
    'action' => 'ideas_table',
    'page' => 1,
    'limit' => 10
]);

echo "<h3>1. –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ analytics.php</h3>";
echo "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: <code>$postData</code><br><br>";

// –ò—Å–ø–æ–ª—å–∑—É–µ–º cURL –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ AJAX –∑–∞–ø—Ä–æ—Å–∞
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'http://localhost/praktica_popov/components/analytics.php');
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/json',
    'Content-Length: ' . strlen($postData)
]);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

echo "<h3>2. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞</h3>";
echo "HTTP –∫–æ–¥: <strong>$httpCode</strong><br>";
echo "–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: <strong>" . strlen($response) . "</strong> —Å–∏–º–≤–æ–ª–æ–≤<br><br>";

echo "<h3>3. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞</h3>";
if (empty($response)) {
    echo "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!<br>";
    echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:<br>";
    echo "- –û—à–∏–±–∫–∞ –≤ analytics.php<br>";
    echo "- –ü—Ä–æ–±–ª–µ–º–∞ —Å URL –∏–ª–∏ –ø—É—Ç–µ–º<br>";
    echo "- PHP –æ—à–∏–±–∫–∞<br>";
} else {
    echo "–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:<br>";
    echo "<pre>" . htmlspecialchars(substr($response, 0, 200)) . "</pre><br>";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON
    $decoded = json_decode($response, true);
    if ($decoded === null) {
        echo "‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON<br>";
        echo "JSON –æ—à–∏–±–∫–∞: " . json_last_error_msg() . "<br><br>";
        echo "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:<br>";
        echo "<pre style='background: #f8f9fa; padding: 10px; max-height: 300px; overflow: auto;'>" . htmlspecialchars($response) . "</pre>";
    } else {
        echo "‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω<br>";
        if (isset($decoded['success'])) {
            echo "Success: " . ($decoded['success'] ? '‚úÖ true' : '‚ùå false') . "<br>";
        }
        if (isset($decoded['error'])) {
            echo "–û—à–∏–±–∫–∞: <strong>" . htmlspecialchars($decoded['error']) . "</strong><br>";
        }
        if (isset($decoded['html'])) {
            echo "HTML –¥–ª–∏–Ω–∞: " . strlen($decoded['html']) . " —Å–∏–º–≤–æ–ª–æ–≤<br>";
        }

        echo "<details><summary>–ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è)</summary>";
        echo "<pre style='background: #f8f9fa; padding: 10px; max-height: 400px; overflow: auto;'>" . json_encode($decoded, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre>";
        echo "</details>";
    }
}

echo "<hr>";

echo "<h3>4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞</h3>";

try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–∏ POST –∑–∞–ø—Ä–æ—Å–µ
    $_SERVER['REQUEST_METHOD'] = 'POST';
    $_POST = [];

    // –ú–æ–∫–∞–µ–º file_get_contents –¥–ª—è php://input
    $GLOBALS['mockPhpInput'] = $postData;

    ob_start();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    $originalPost = $_POST;
    $originalServer = $_SERVER['REQUEST_METHOD'];

    // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ analytics.php
    include 'analytics.php';

    $output = ob_get_contents();
    ob_end_clean();

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    $_POST = $originalPost;
    $_SERVER['REQUEST_METHOD'] = $originalServer;

    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è:<br>";
    if (empty($output)) {
        echo "‚ùå –ü—É—Å—Ç–æ–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞<br>";
    } else {
        $decoded = json_decode($output, true);
        if ($decoded) {
            echo "‚úÖ –ü—Ä—è–º–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç<br>";
            echo "Success: " . ($decoded['success'] ? '‚úÖ true' : '‚ùå false') . "<br>";
        } else {
            echo "‚ùå –ü—Ä—è–º–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON<br>";
            echo "<pre>" . htmlspecialchars($output) . "</pre>";
        }
    }

} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏: " . $e->getMessage() . "<br>";
}

echo "<hr>";

echo "<h3>5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é</h3>";
if ($httpCode == 200 && !empty($response) && json_decode($response)) {
    echo "‚úÖ <strong>API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</strong><br>";
    echo "–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ JavaScript –¥–∞—à–±–æ—Ä–¥–∞.<br>";
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞.<br>";
} else {
    echo "‚ùå <strong>–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å API</strong><br>";
    echo "–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å analytics.php<br>";
}

echo "<br><a href='fix_dashboard.html'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ</a> | ";
echo "<a href='admin.html' target='_blank'>–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥ ‚Üí</a>";
?>