<?php
// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ analytics.php –∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
if (ob_get_level()) ob_clean();

header('Content-Type: application/json; charset=utf-8');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

try {
    require_once 'config.php';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    $action = 'stats';
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $input = json_decode(file_get_contents('php://input'), true);
        if ($input && isset($input['action'])) {
            $action = $input['action'];
        }
    } else if (isset($_GET['action'])) {
        $action = $_GET['action'];
    }
    
    $response = ['success' => false, 'error' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'];
    
    switch ($action) {
        case 'stats':
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            $stmt = $pdo->query("SELECT COUNT(*) FROM ideas");
            $totalIdeas = $stmt->fetchColumn();
            
            $stmt = $pdo->query("SELECT COUNT(*) FROM ideas WHERE status = '–í —Ä–∞–±–æ—Ç–µ'");
            $inProgress = $stmt->fetchColumn();
            
            $stmt = $pdo->query("SELECT COUNT(*) FROM ideas WHERE status = '–ü—Ä–∏–Ω—è—Ç–æ'");
            $approved = $stmt->fetchColumn();
            
            $stmt = $pdo->query("SELECT COUNT(DISTINCT user_id) FROM ideas");
            $activeUsers = $stmt->fetchColumn();
            
            $response = [
                'success' => true,
                'data' => [
                    'total_ideas' => ['value' => $totalIdeas, 'change' => 12],
                    'ideas_in_progress' => ['value' => $inProgress, 'change' => 8],
                    'ideas_approved' => ['value' => $approved, 'change' => 15],
                    'active_users' => ['value' => $activeUsers, 'change' => 5]
                ]
            ];
            break;
            
        case 'charts':
            // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            $response = [
                'success' => true,
                'data' => [
                    'ideasTimeline' => [
                        'labels' => ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω'],
                        'values' => [12, 19, 15, 23, 18, 25]
                    ],
                    'ideasStatus' => [
                        'labels' => ['–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', '–í —Ä–∞–±–æ—Ç–µ', '–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'],
                        'values' => [15, 8, 12, 5]
                    ],
                    'categories' => [
                        'labels' => ['IT', '–ü—Ä–æ—Ü–µ—Å—Å—ã', '–û—Ñ–∏—Å', 'HR'],
                        'values' => [20, 15, 10, 8]
                    ],
                    'userActivity' => [
                        'labels' => ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç'],
                        'values' => [5, 8, 12, 7, 10]
                    ]
                ]
            ];
            break;
            
        case 'ideas_table':
            // –¢–∞–±–ª–∏—Ü–∞ –∏–¥–µ–π
            $page = 1;
            $limit = 20;
            
            $stmt = $pdo->query("SELECT COUNT(*) FROM ideas");
            $total = $stmt->fetchColumn();
            
            $stmt = $pdo->query("
                SELECT i.*, u.username 
                FROM ideas i 
                LEFT JOIN users u ON i.user_id = u.id 
                ORDER BY i.created_at DESC 
                LIMIT $limit
            ");
            $ideas = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $html = '';
            if (empty($ideas)) {
                $html = '<tr><td colspan="7" style="text-align: center; color: #6c757d;">–ò–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            } else {
                foreach ($ideas as $idea) {
                    $title = htmlspecialchars($idea['title'] ?? $idea['idea'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
                    $category = htmlspecialchars($idea['category'] ?? '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
                    $status = htmlspecialchars($idea['status'] ?? '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞');
                    $username = htmlspecialchars($idea['username'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π');
                    $date = date('d.m.Y', strtotime($idea['created_at'] ?? 'now'));
                    $id = $idea['id'];
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞
                    $statusClass = '';
                    switch ($status) {
                        case '–ü—Ä–∏–Ω—è—Ç–æ':
                            $statusClass = 'status-success';
                            break;
                        case '–í —Ä–∞–±–æ—Ç–µ':
                            $statusClass = 'status-warning';
                            break;
                        case '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                            $statusClass = 'status-danger';
                            break;
                        default:
                            $statusClass = 'status-info';
                    }
                    
                    $html .= "
                    <tr>
                        <td>{$id}</td>
                        <td>{$title}</td>
                        <td>{$category}</td>
                        <td><span class=\"status-badge {$statusClass}\">{$status}</span></td>
                        <td>{$username}</td>
                        <td>{$date}</td>
                        <td>
                            <div class=\"table-actions\">
                                <button class=\"action-icon-btn btn-view\" onclick=\"viewIdea({$id})\" title=\"–ü—Ä–æ—Å–º–æ—Ç—Ä\">üëÅ</button>
                                <button class=\"action-icon-btn btn-edit\" onclick=\"editIdea({$id})\" title=\"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\">‚úèÔ∏è</button>
                                <button class=\"action-icon-btn btn-delete\" onclick=\"deleteIdea({$id})\" title=\"–£–¥–∞–ª–∏—Ç—å\">üóë</button>
                            </div>
                        </td>
                    </tr>";
                }
            }
            
            $totalPages = ceil($total / $limit);
            
            $response = [
                'success' => true,
                'html' => $html,
                'pagination' => [
                    'currentPage' => $page,
                    'totalPages' => $totalPages,
                    'total' => $total,
                    'start' => 1,
                    'end' => min($limit, $total)
                ]
            ];
            break;
            
        case 'get_idea':
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–¥–µ–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            $ideaId = $input['id'] ?? 0;
            
            $stmt = $pdo->prepare("
                SELECT i.*, u.username 
                FROM ideas i 
                LEFT JOIN users u ON i.user_id = u.id 
                WHERE i.id = ?
            ");
            $stmt->execute([$ideaId]);
            $idea = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if ($idea) {
                // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∏–¥–µ–∏
                $stmt = $pdo->prepare("SELECT * FROM idea_attachments WHERE idea_id = ? ORDER BY created_at");
                $stmt->execute([$ideaId]);
                $attachments = $stmt->fetchAll(PDO::FETCH_ASSOC);
                
                $idea['attachments'] = $attachments;
                
                $response = [
                    'success' => true,
                    'data' => $idea
                ];
            } else {
                $response = [
                    'success' => false,
                    'error' => '–ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                ];
            }
            break;
            
        case 'update_idea':
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–¥–µ–∏
            $ideaId = $input['id'] ?? 0;
            $title = $input['title'] ?? '';
            $description = $input['description'] ?? '';
            $category = $input['category'] ?? '';
            $status = $input['status'] ?? '';
            
            if ($ideaId && $title && $description) {
                $stmt = $pdo->prepare("
                    UPDATE ideas 
                    SET title = ?, description = ?, category = ?, status = ?, updated_at = NOW()
                    WHERE id = ?
                ");
                
                if ($stmt->execute([$title, $description, $category, $status, $ideaId])) {
                    $response = [
                        'success' => true,
                        'message' => '–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
                    ];
                } else {
                    $response = [
                        'success' => false,
                        'error' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏'
                    ];
                }
            } else {
                $response = [
                    'success' => false,
                    'error' => '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
                ];
            }
            break;
            
        case 'delete_idea':
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏–¥–µ–∏
            $ideaId = $input['id'] ?? 0;
            
            if ($ideaId) {
                $stmt = $pdo->prepare("DELETE FROM ideas WHERE id = ?");
                
                if ($stmt->execute([$ideaId])) {
                    $response = [
                        'success' => true,
                        'message' => '–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
                    ];
                } else {
                    $response = [
                        'success' => false,
                        'error' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–¥–µ–∏'
                    ];
                }
            } else {
                $response = [
                    'success' => false,
                    'error' => 'ID –∏–¥–µ–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
                ];
            }
            break;
    }
    
    echo json_encode($response, JSON_UNESCAPED_UNICODE);
    
} catch (Exception $e) {
    $response = [
        'success' => false,
        'error' => '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' . $e->getMessage()
    ];
    
    echo json_encode($response, JSON_UNESCAPED_UNICODE);
}
?>